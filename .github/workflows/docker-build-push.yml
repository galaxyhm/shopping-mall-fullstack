name: Build and Push Docker Image to Harbor

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
    paths:
      - 'shoppingmall/**'
      - 'Dockerfile'
      - 'pyproject.toml'
      - 'uv.lock'
      - 'main.py'
      - '.github/workflows/docker-build-push.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'shoppingmall/**'
      - 'Dockerfile'
      - 'pyproject.toml'
      - 'uv.lock'
      - 'main.py'
      - '.github/workflows/docker-build-push.yml'

env:
  # Harbor 레지스트리 설정
  REGISTRY: ${{ secrets.HARBOR_REGISTRY }}
  IMAGE_NAME: shoppingmall-django
  PROJECT_NAME: ${{ secrets.HARBOR_PROJECT }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: develop
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Debug environment variables
      run: |
        echo "Registry: ${{ env.REGISTRY }}"
        echo "Project: ${{ env.PROJECT_NAME }}"
        echo "Image: ${{ env.IMAGE_NAME }}"
        echo "Full image path: ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}/${{ env.IMAGE_NAME }}"
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Harbor Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.HARBOR_USERNAME }}
        password: ${{ secrets.HARBOR_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        
    - name: Image digest
      run: echo ${{ steps.build.outputs.digest }}
